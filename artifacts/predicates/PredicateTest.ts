/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.1
  Forc version: 0.68.1
  Fuel-Core version: 0.43.1
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate as __Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

export type PredicateTestConfigurables = Partial<{
    SIGNER: string;
}>;

export type PredicateTestInputs = [witness_index: BigNumberish];

export type PredicateTestParameters = Omit<
  PredicateParams<PredicateTestInputs, PredicateTestConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "predicate",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [],
  "functions": [
    {
      "inputs": [
        {
          "name": "witness_index",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "SIGNER",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "offset": 9112
    }
  ]
};

const bytecode = decompressBytecode('H4sIAAAAAAAAA8Waa2xcxRXHZ3ed2CEP38R2Ym6A3AQTlmc2JHESCORu16v1stl6TGLFUbK51wUT2qqtMeBGpRS3VaV8qNQUCZoPPMzbvHf9dhJgeYf38n6DkYqaCFbyByIR0Tb9n3vH9ng8DiqoqqVo7PubOffMmTPnzJwbczTCrmWshHk/p1ui3Zc5ng8Yx4+zvzJm8S9Hd/O/ox2xmfXNKtb87UiQfztSgnGV5lecXW2zUEs8yCqSBuuoZzPb61mwIl7Z2VHHArWQ1hINXoq+AbRzMlHGzCMQOlnOIjNWYDU2YzczVn5LGfpALt7tmrEuZiY6mZkaYW4ROsSythvLUmuNte2bmBWOl+TNrxm7icYcs9g+yPgbZF36jSfzxgmZ5cyXOcKc4vyeFugIvW1F7yCel0KvoKd/XWBGVbKE+qCv185tiZdgPiVsOXQ269tYOFnJeKy32fnK+LlbtGweZ2VuImvzxPBuN87qycY81hN2vmLxsWc81rfHjRr1mVhuRUWU2R22by96zqOsjCcOHEI/yDjY5be5Eej8AWRs4LGDXTzRO4q/D2QSuQPE2zF+sV3C6G8jWsl2xBnN8UX/eaX6/Fl63o65LsYzhT0gWEjDnhCsRMNeEWyGhh0UbKaGvSBY6SQGX3GKgacEK9OwDwWbpWG9gp2kYa8JNlvDugWbo2EfCTZXw+4WbJ6GDQpWrmGfCWZo2KOCzdewQ4It0LC7BKvQsGcEq9SwnGBVGvakYAs1rF+wRRr2kmDVGnafYCdr2IBgpoY9L9hiDdsv2Cka9qlgp2rYw4KdpmFZwZZo2NuCWRp2m2BLNSwv2DINe12w0zXsfcFqNKxPsDM07H7BlmvYy4KdqWGvChbWsE8EO0vDnhPsbA17RLBzNOwtwc7VsHcEO0/DCoKdr2EPCrZCw94TLKJhXYKt1LDbBbtAw+4UbJWGPSbYag37WLA1GnavYLUado9gazXsVsHWadiQYOs17HHBLtSwdwW7SMPeFGyDhj0k2MUa9oZgl2jYHYJt1LCn8fcHPGmUOcWlw+M5MJUbNqI11PfFnVGDjefAiefPjj0fz4ET7AGJ+Tlwgj0hMT8HTrBXJObnwAl2UGJ+DpxgL0isdHFcsHiNjbPBUzuRI8dz4GT2ocRmKaxXYicp7DWJzVZYt8TmKOwjic1V2N0Sm6ewQYmVK+wziRkKe1Ri8xV2SGILFHaXxCoU9ozEKhWWk1iVwp6U2EKF9UtskcJekli1wu6T2MkKG5CYqbDnJbZYYfsldorCPpXYqQp7WGKnKSwrsSUKe1tilsJuk9hSheUltkxhr0vsdIW9L7EahfVJ7AyF3S+x5Qp7WWJnKuxViYUV9onEzlLYcxI7W2GPSOwchb0lsXMV9o7EzlNYQWLnK+xBia1Q2HsSiyisS2IrFXa7xC5Q2J0SW6WwxyS2WmEfS2yNwu6VWK3C7pHYWoXdKrF1ChuS2HqFPS6xCxX2rsQuUtibEtugsIckdrHC3pDYJQq7Q2IbFfY0MdwHqykP0n3SxJ2U4+6JOyHuxwN5PLN4on833bvNLwzl7h14IIO7dyZRCGRShSDy6Vbcx5qRS7fxWH833mebRwyMU+/sgUFlHMe4Roy7zNzi6WotjG5hHXYgmYmNzjaiLM8T+zt5aoi7SaPaPGIp8oKmmSgwnspVg9Od13XjuEcnRi3ekGt20zSHHtyD8QzcTUYstK6bxBxT+wsY0wn5Bfy+z3sW278P9/kdRrKykzfgeTpit3PckbewHeFkFYtG19jUhycGRnw79e+dZp4tme2Y51bMc3MhSHbmdTb0HCY9odOAQXOZatfQo/58st1ev4Zc3p9Df4Tu/li3P+LOD/swNxPL3ifu/3PpdzqPVERRZ7BZELYrq6X1jPVaqC1cQecRp2i0Yq4G5BioK6She8SvFwz6dYLYIOoE7j+dIv+XU7T/zRsG2sbmZn4eUfV8nGov8BfYm4V57EAX/AVtfxm10GeO0O0sYngH1S7AB7jeXqGbhbw9vl0HDd//BjFvy9L7YOjXNAbvKMU8RzDP35INMM8bUCsZFfOcCZZH7WM3aivlO+vIx32GdWR4B/UpI71hC/KVvZBzGZ0L4Q947vcZsxv8xMK6KPYbusq331C3U2ypcoqNC51idBFP9ecn7Kf6beAGf745YZcDu3379Y0I+43Vdsh+u2EHLuwXmcZ+cSGP1hL2G17n22+42Y1HprPfmZL9Cpj3b4T9rse4gmS/LOzXIdnPY3gH6Srs1zci7NcJOXzCfn4f32405iD8w6K2mif6KNbIPk3z3iP59J5pfDqCd1wpfPpnkB2B7DD0qIIetvDpb8SarMOalGJNcM6PzuKpgX3Tr0moTPgg+UfYl0trsr8ZOivyh/K+/GHcJVosyF8K+cuw5odPsOaoIXryqT4n5EJ+4oBY24OQ20f73IBNfk82MetQG0X8NmF3qi9SrRJ61JlfG9T+CDKGEL+3LUxWiTqj187H/BnJIV2Umuku0sGIzkCM7O2CHa+l+xDWq3xnEm1qOC/8m+qObVj3H/vPaO36CrR20G2dUncswCblnhwvVo/Wo7ZasiRdkkfsDCxOr2FGuia/IxlBDZdso9oFe2liXPn8KMZtwji0dM8huXqfZxuNJm5fxwJ/vgn1WdihxzxmjNVwbxQ13I1SXbjar+Hu9erCVP81j0Cnf2RVufMyDYjdmwsBxH0rnJ5hO/EIc+J2gPKTE8c6HDWoZlwt1Yw3iveN16Hld3n13k1tkEFyWMChtYQMTc05NHn8CPNq30fxb2JuIdH3uDQ3S34fT8OHGlmQb80abhP5AVfneI65tcAqGuN2B9aIavK8kZVlmuBDTXh3M/xuCwtlmmzW3ox77rZWG4xlMjbWAvyLNvi3q8pcSjKdKGdOo0t1d8P8crJtr2NsLflfpjFCPsjo/pqJ0u/MdtKYi1+LtyS7HD+BXQLT2GV8zSdsgm8BDSOsqrHGNjEPMeeZy+vRb0sbq/K/QdCzQLipxDaPYuyxiLq24zrA3saYHtPM82rMwzjxmoXqx/VzoN92zCk1OsdIWnnekL3KTVsWb4xYbiPaVC/iacSmFmeCAs4EiJ855AL475S4ztpwvmLwYf/ssTU3hDi51ilGEAvt9aovQNc1dOa4BN8oTLuTib2NWJcdxf4/DXGiDOerw/75KlevP7cwx3tnCu9swLkuagScqIU2EqKcQDkJfWZAJuUZE3JPHXuOOHPYy1WxnJfzEfe50GEFMfQL+/1y7jRxoEc+U/KGnnqnyJKY86VO0UphHM6wZKcp44bIF/3vQz2HxHehbuhWhXe6+A4Du+dEvpgSy+vEOY3OA5b33QbnFJ7CWdPPRch9OQNxEeuUtTHnMsRYyoGwJfUxwm7GCptH2+Dv8INjrurvpbo4AjtUK3GjVBPnxPcvEQsasvAT72xt689yrMHLSw2IFYgb5M/ie5nBN2fF2WHKN7wKz+aIkYgx3G2K6GLM2SbiKOKdFzsR+8bipvytbWxvyfpPjmVCL1pDRf4Ckr98E8Zx7OGmCMUs2sMl3p6MZb3YGW4syeP9FHsRL7z3y/Hlu/e2L8eLNdPs6SV63f2YAxsa8Ec6V4Xcom24qaxhHrWEHuMxZom67qodyE9pPuKsJHJvFn7n+4QyL+EXISneBPx4swvyLh/B2YKx5fhn1iEvFQ3cE9hS/FuGPU5+jbsR5E65b7HrzRTyRtpiHZtYM08byDNGsKLRppi62YvrjXWdGawF355tc7cZWLfJeQL5ut3E3WjhtlbW0eyt10r05dP0fYb6cifb6WaIt6n8T6ZTQE5yRU6a7KfgfxDjcR+lPshfn6sy2K+oj1t0Db4d98jt8Pvt2bzXOrR3fNnKmIe8+51TgF+78K22AMa408zha4oVRrzKxl7Zi3wMu6oxOHAL7UF8j+500jad7QK0rjjzzvXvwLQmubB/R83hbOrdD6esD+R00/pgzxymHKHZM7NJl2i0BrEc+wpx1W01LPPoXvgP/ONYp/Cf0InyLvaxNu/K3+BtZQ9b2MPed/c2m83xvsPDnynGCt+1NWcheS9Mkie+6VuUL+6M9UGGtzdlGWNxUZYRVmSEp9lPYzqFNfK+K3/P+6H5G2v4u/8ufwfPoDXd+APyN975l/9X/sa7N3yf/I1xtd83f2P/Pvi/zN/f9XNy/NqrWttbr/uFtfmnu37ZeoWVbr3mmpZdrReeVLua+CveDwtGVl6wavWa2rXr1rf85PIrWq/0Ry8Y8ttZz/ptqM9vg+L/40z/8x+5Bdc1uCMAAA==');

export class PredicateTest extends __Predicate<
  PredicateTestInputs,
  PredicateTestConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: PredicateTestParameters) {
    super({ abi, bytecode, ...params });
  }
}
